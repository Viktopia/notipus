# Notipus Docker Compose Configuration
#
# DEVELOPMENT:
#   docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
#
# PRODUCTION:
#   1. Copy this file to docker-compose.prod.yml
#   2. Update environment variables for production
#   3. Set proper secrets, database passwords, etc.
#   4. docker-compose -f docker-compose.prod.yml up

# YAML Anchors for reusable configurations
x-common-variables: &common-variables
  # Database
  DB_HOST: db
  DB_PORT: 5432
  DB_NAME: ${DB_NAME:-notipus_dev}
  DB_USER: ${DB_USER:-notipus_user}
  # CodeQL[SM02380]: Development default password - not used in production
  DB_PASSWORD: ${DB_PASSWORD:-dev_password_123}

  # Redis
  REDIS_URL: redis://redis:6379/0

  # Django (development defaults)
  # CodeQL[SM02380]: Development default secret - not used in production
  SECRET_DJANGO_KEY: ${SECRET_DJANGO_KEY:-django-dev-key-not-for-production-use}
  DEBUG: ${DEBUG:-True}
  ALLOWED_HOSTS: ${ALLOWED_HOSTS:-localhost,127.0.0.1,django,notipus_django}

  # Global Authentication (Notipus's OAuth apps)
  # These are for app-level OAuth, not tenant-specific configurations
  # CodeQL[SM02380]: Development placeholders - not real credentials
  SLACK_CLIENT_ID: ${SLACK_CLIENT_ID:-your_slack_auth_client_id}
  SLACK_CLIENT_SECRET: ${SLACK_CLIENT_SECRET:-your_slack_auth_client_secret}
  SLACK_REDIRECT_URI: ${SLACK_REDIRECT_URI:-http://localhost/accounts/slack/login/callback/}
  SLACK_CONNECT_REDIRECT_URI: ${SLACK_CONNECT_REDIRECT_URI:-http://localhost/api/connect/slack/callback/}
  SHOPIFY_CLIENT_ID: ${SHOPIFY_CLIENT_ID:-your_shopify_auth_client_id}
  SHOPIFY_CLIENT_SECRET: ${SHOPIFY_CLIENT_SECRET:-your_shopify_auth_client_secret}
  SHOPIFY_REDIRECT_URI: ${SHOPIFY_REDIRECT_URI:-http://localhost/integrate/shopify/callback/}

  # Global Billing (Notipus's revenue) - These are for our own billing, not customer payments
  # CodeQL[SM02380]: Development test keys - not real billing credentials
  STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY:-sk_test_notipus_billing_key}
  NOTIPUS_STRIPE_WEBHOOK_SECRET: ${NOTIPUS_STRIPE_WEBHOOK_SECRET:-whsec_notipus_billing_secret}

  # External Services
  # CodeQL[SM02380]: Development API key - not real external service credential
  BRANDFETCH_API_KEY: ${BRANDFETCH_API_KEY:-dev_brandfetch_key}
  BRANDFETCH_BASE_URL: ${BRANDFETCH_BASE_URL:-https://api.brandfetch.io/v2}
  DISABLE_BILLING: ${DISABLE_BILLING:-True}

x-django-service: &django-service
  build:
    context: .
    dockerfile: Dockerfile
  environment: *common-variables
  networks:
    - app_network
  restart: unless-stopped

x-app-dependencies: &app-dependencies
  db:
    condition: service_healthy
  redis:
    condition: service_healthy

x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3

services:
  db:
    image: postgres:17
    container_name: notipus_db
    environment:
      POSTGRES_DB: notipus_dev
      POSTGRES_USER: notipus_user
      POSTGRES_PASSWORD: dev_password_123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD-SHELL", "pg_isready -U notipus_user -d notipus_dev"]

  redis:
    image: redis:7-alpine
    container_name: notipus_redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "redis-cli", "ping"]

  migration:
    <<: *django-service
    container_name: notipus_migration
    command: ["python", "manage.py", "migrate"]
    depends_on: *app-dependencies
    restart: "no"  # Migration should run once and exit

  django:
    <<: *django-service
    container_name: notipus_django
    command: ["gunicorn", "--bind", "0.0.0.0:8000", "--workers", "3", "django_notipus.wsgi:application"]
    volumes:
      - static_volume:/app/staticfiles
    ports:
      - "8000:8000"
    depends_on:
      <<: *app-dependencies
      migration:
        condition: service_completed_successfully
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "python", "manage.py", "check"]

  nginx:
    image: nginx:alpine
    container_name: notipus_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - static_volume:/app/staticfiles:ro
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      django:
        condition: service_healthy
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "curl", "-f", "http://localhost/health/"]

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local

networks:
  app_network:
    driver: bridge
