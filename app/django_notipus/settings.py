"""
Django settings for django_notipus project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path

from django.utils.functional import SimpleLazyObject

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get(
    "SECRET_DJANGO_KEY", "django-insecure-dev-key-change-in-production"
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG", "False").lower() == "true"

APP_NAME = os.environ.get("FLY_APP_NAME")
ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",

    # Third-party apps
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.slack",
    "allauth.socialaccount.providers.shopify",
    "django_extensions",

    # Local apps
    "webhooks",
    "core",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
]

ROOT_URLCONF = "django_notipus.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "core" / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
            "debug": True,
        },
    },
]

WSGI_APPLICATION = "django_notipus.wsgi.application"

# Authentication configuration
AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]

# Django-allauth configuration
SITE_ID = 1

# Email configuration
EMAIL_BACKEND = os.environ.get('EMAIL_BACKEND', 'django.core.mail.backends.console.EmailBackend')

# SMTP settings for production (when EMAIL_BACKEND is smtp)
EMAIL_HOST = os.environ.get('EMAIL_HOST', 'localhost')
EMAIL_PORT = int(os.environ.get('EMAIL_PORT', '587'))
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True').lower() == 'true'
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'noreply@notipus.com')

# Email and verification
ACCOUNT_EMAIL_VERIFICATION = os.environ.get("ACCOUNT_EMAIL_VERIFICATION", "optional")

# Login methods (replaces ACCOUNT_AUTHENTICATION_METHOD = "username_email")
ACCOUNT_LOGIN_METHODS = {'username', 'email'}

# Signup fields (replaces ACCOUNT_EMAIL_REQUIRED = True and ACCOUNT_USERNAME_REQUIRED = True)
ACCOUNT_SIGNUP_FIELDS = ['email*', 'username*', 'password1*', 'password2*']

# Rate limiting (replaces ACCOUNT_LOGIN_ATTEMPTS_LIMIT = 5 and ACCOUNT_LOGIN_ATTEMPTS_TIMEOUT = 300)
ACCOUNT_RATE_LIMITS = {'login_failed': '5/300s'}

# Session and logout settings
ACCOUNT_LOGOUT_ON_GET = True
ACCOUNT_SESSION_REMEMBER = True

# Login/logout URLs
LOGIN_URL = "/accounts/login/"
LOGIN_REDIRECT_URL = "/dashboard/"
LOGOUT_REDIRECT_URL = "/"

# Social account providers
SOCIALACCOUNT_PROVIDERS = {
    "slack": {
        "APP": {
            "client_id": os.environ.get("SLACK_CLIENT_ID", ""),
            "secret": os.environ.get("SLACK_CLIENT_SECRET", ""),
        },
        "SCOPE": ["openid", "profile", "email"],
        "AUTH_PARAMS": {"approval_prompt": "force"},
    },
    "shopify": {
        "APP": {
            "client_id": os.environ.get("SHOPIFY_CLIENT_ID", ""),
            "secret": os.environ.get("SHOPIFY_CLIENT_SECRET", ""),
        },
        "SCOPE": ["read_orders", "read_products", "read_customers"],
    },
}

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("DB_NAME", "notipus"),
        "USER": os.environ.get("DB_USER", "postgres"),
        "PASSWORD": os.environ.get("DB_PASSWORD", "postgres"),
        "HOST": os.environ.get("DB_HOST", "localhost"),
        "PORT": os.environ.get("DB_PORT", "5432"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": (
            "django.contrib.auth.password_validation."
            "UserAttributeSimilarityValidator"
        ),
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "/static/"

# Specify the directory where static files will be collected
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

# Specify additional directories for static files
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "loggers": {
        "webhooks": {
            "handlers": ["console"],
            "level": "INFO",
        },
        "django.contrib.staticfiles": {
            "handlers": ["console"],
            "level": "ERROR",  # Silence static file duplicate warnings
        },
    },
}


# Webhook secrets configuration
CHARGIFY_WEBHOOK_SECRET = os.environ.get(
    "CHARGIFY_WEBHOOK_SECRET", "dev-chargify-secret"
)

SHOPIFY_WEBHOOK_SECRET = os.environ.get("SHOPIFY_WEBHOOK_SECRET", "dev-shopify-secret")

STRIPE_WEBHOOK_SECRET = os.environ.get(
    "STRIPE_WEBHOOK_SECRET", "dev-stripe-webhook-secret"
)

# Provider configurations
SHOPIFY_SHOP_URL = os.environ.get("SHOPIFY_SHOP_URL", "test.myshopify.com")
SHOPIFY_ACCESS_TOKEN = os.environ.get("SHOPIFY_ACCESS_TOKEN", "dev-token")

# Slack client configuration
# SLACK_WEBHOOK_URL = os.getenv("SLACK_WEBHOOK_URL")
SLACK_CLIENT = None

SLACK_CLIENT_ID = os.environ.get("SLACK_CLIENT_ID", "")
SLACK_CLIENT_SECRET = os.environ.get("SLACK_CLIENT_SECRET", "")
SLACK_REDIRECT_URI = os.environ.get("SLACK_REDIRECT_URI", "")
SLACK_CONNECT_REDIRECT_URI = os.environ.get("SLACK_CONNECT_REDIRECT_URI", "")

SLACK_CLIENT_BOT_ID = os.environ.get("SLACK_CLIENT_BOT_ID", "")
SLACK_CLIENT_BOT_SECRET = os.environ.get("SLACK_CLIENT_BOT_SECRET", "")
SLACK_REDIRECT_BOT_URI = os.environ.get("SLACK_REDIRECT_BOT_URI", "")

# Stripe configuration
STRIPE_SECRET_KEY = os.environ.get("STRIPE_SECRET_KEY", "sk_test_dev_key")
STRIPE_PLANS = {
    "basic": os.environ.get("STRIPE_BASIC_PLAN", ""),
    "pro": os.environ.get("STRIPE_PRO_PLAN", ""),
    "enterprise": os.environ.get("STRIPE_ENTERPRISE_PLAN", ""),
}
TRIAL_PERIOD_DAYS = 14

DISABLE_BILLING = os.environ.get("DISABLE_BILLING", "False").lower() == "true"

# Brandfetch configuration
BRANDFETCH_API_KEY = os.environ.get("BRANDFETCH_API_KEY", "")
BRANDFETCH_BASE_URL = os.environ.get(
    "BRANDFETCH_BASE_URL", "https://api.brandfetch.io/v2"
)


# Lazy-loaded provider and service instances to avoid circular imports
def _get_shopify_provider():
    """Lazy factory for Shopify provider"""
    from webhooks.providers.shopify import ShopifyProvider

    return ShopifyProvider(webhook_secret=SHOPIFY_WEBHOOK_SECRET)


def _get_chargify_provider():
    """Lazy factory for Chargify provider"""
    from webhooks.providers.chargify import ChargifyProvider

    return ChargifyProvider(webhook_secret=CHARGIFY_WEBHOOK_SECRET)


def _get_stripe_provider():
    """Lazy factory for Stripe provider"""
    from webhooks.providers.stripe import StripeProvider

    return StripeProvider(STRIPE_WEBHOOK_SECRET)


def _get_event_processor():
    """Lazy factory for event processor"""
    from webhooks.services.event_processor import EventProcessor

    return EventProcessor()


def _get_domain_enrichment_service():
    """Lazy factory for domain enrichment service"""
    from core.services.enrichment import DomainEnrichmentService

    return DomainEnrichmentService()


# Provider instances using lazy loading
SHOPIFY_PROVIDER = SimpleLazyObject(_get_shopify_provider)
CHARGIFY_PROVIDER = SimpleLazyObject(_get_chargify_provider)
STRIPE_PROVIDER = SimpleLazyObject(_get_stripe_provider)

# Service instances using lazy loading
EVENT_PROCESSOR = SimpleLazyObject(_get_event_processor)
DOMAIN_ENRICHMENT_SERVICE = SimpleLazyObject(_get_domain_enrichment_service)
