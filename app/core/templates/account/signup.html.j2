{% extends "core/base.html.j2" %}
{% load socialaccount %}

{% block title %}Sign Up - Notipus{% endblock %}

{% block content %}
<div class="min-h-screen flex flex-col justify-center py-12 sm:px-6 lg:px-8">
    <div class="sm:mx-auto sm:w-full sm:max-w-md">
        <div class="text-center">
            <h2 class="mt-6 text-3xl font-extrabold text-gray-900">
                Create your account
            </h2>
            <p class="mt-2 text-sm text-gray-600">
                Start your 14-day free trial today
            </p>
        </div>
    </div>

    <div class="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
        <div class="bg-white py-8 px-4 shadow-lg sm:rounded-lg sm:px-10">
            <!-- Passkey Signup Option -->
            <div class="mb-6">
                <button id="passkey-signup"
                        class="group relative w-full flex justify-center py-2 px-4 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 12H9v4a2 2 0 01-2 2H4a2 2 0 01-2-2v-3c0-1.042.018-2.042.057-3H4zm7-4a2 2 0 11-4 0 2 2 0 014 0z"></path>
                    </svg>
                    Create Account with Passkey
                </button>
                <p class="text-xs text-gray-500 mt-2 text-center">
                    Supported on modern browsers including Chrome, Firefox, Safari, and Edge
                </p>
            </div>

            <!-- Divider -->
            <div class="mb-6">
                <div class="relative">
                    <div class="absolute inset-0 flex items-center">
                        <div class="w-full border-t border-gray-300"></div>
                    </div>
                    <div class="relative flex justify-center text-sm">
                        <span class="px-2 bg-white text-gray-500">Or create account with email</span>
                    </div>
                </div>
            </div>

            <form class="space-y-6" method="post">
                {% csrf_token %}

                <!-- Username Field -->
                <div>
                    <label for="id_username" class="block text-sm font-medium text-gray-700">
                        Username
                    </label>
                    <div class="mt-1">
                        <input id="id_username" name="username" type="text" required
                               class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md placeholder-gray-400 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
                               value="{{ form.username.value|default_if_none:'' }}">
                    </div>
                    {% if form.username.errors %}
                        <p class="mt-1 text-sm text-red-600">{{ form.username.errors.0 }}</p>
                    {% endif %}
                </div>

                <!-- Email Field -->
                <div>
                    <label for="id_email" class="block text-sm font-medium text-gray-700">
                        Email address
                    </label>
                    <div class="mt-1">
                        <input id="id_email" name="email" type="email" required
                               class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md placeholder-gray-400 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
                               value="{{ form.email.value|default_if_none:'' }}">
                    </div>
                    {% if form.email.errors %}
                        <p class="mt-1 text-sm text-red-600">{{ form.email.errors.0 }}</p>
                    {% endif %}
                </div>

                <!-- Password Field -->
                <div>
                    <label for="id_password1" class="block text-sm font-medium text-gray-700">
                        Password
                    </label>
                    <div class="mt-1">
                        <input id="id_password1" name="password1" type="password" required
                               class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md placeholder-gray-400 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm">
                    </div>
                    {% if form.password1.errors %}
                        <p class="mt-1 text-sm text-red-600">{{ form.password1.errors.0 }}</p>
                    {% endif %}
                </div>

                <!-- Password Confirmation Field -->
                <div>
                    <label for="id_password2" class="block text-sm font-medium text-gray-700">
                        Confirm password
                    </label>
                    <div class="mt-1">
                        <input id="id_password2" name="password2" type="password" required
                               class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md placeholder-gray-400 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm">
                    </div>
                    {% if form.password2.errors %}
                        <p class="mt-1 text-sm text-red-600">{{ form.password2.errors.0 }}</p>
                    {% endif %}
                </div>

                <!-- Submit Button -->
                <div>
                    <button type="submit"
                            class="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
                        Create Account
                    </button>
                </div>

                <!-- Divider -->
                <div class="mt-6">
                    <div class="relative">
                        <div class="absolute inset-0 flex items-center">
                            <div class="w-full border-t border-gray-300"></div>
                        </div>
                        <div class="relative flex justify-center text-sm">
                            <span class="px-2 bg-white text-gray-500">Or continue with</span>
                        </div>
                    </div>
                </div>

                <!-- OAuth Buttons -->
                <div class="mt-6 grid grid-cols-1 gap-3">
                    <a href="{% provider_login_url 'slack' %}"
                       class="w-full inline-flex justify-center py-2 px-4 border border-gray-300 rounded-md shadow-sm bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                        <i class="fas fa-comments w-5 h-5 mr-2"></i>
                        Continue with Slack
                    </a>
                </div>
            </form>

            <!-- Login Link -->
            <div class="mt-6">
                <div class="text-center">
                    <span class="text-sm text-gray-600">
                        Already have an account?
                        <a href="{% url 'account_login' %}" class="font-medium text-primary-600 hover:text-primary-500">
                            Sign in
                        </a>
                    </span>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Passkey Signup Modal -->
<div id="passkey-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
        <div class="mt-3">
            <div class="flex items-center justify-between mb-4">
                <h3 class="text-lg font-medium text-gray-900">Create Account with Passkey</h3>
                <button id="close-modal" class="text-gray-400 hover:text-gray-600">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
            <p class="text-sm text-gray-500 mb-4">
                Enter your username and email to create your account with a passkey.
            </p>
            <div class="space-y-4">
                <div>
                    <label for="modal-username" class="block text-sm font-medium text-gray-700">Username</label>
                    <input type="text" id="modal-username"
                           class="mt-1 appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md placeholder-gray-400 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
                           placeholder="Enter username">
                </div>
                <div>
                    <label for="modal-email" class="block text-sm font-medium text-gray-700">Email</label>
                    <input type="email" id="modal-email"
                           class="mt-1 appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md placeholder-gray-400 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
                           placeholder="Enter email address">
                </div>
            </div>
            <div class="flex justify-end space-x-3 mt-6">
                <button id="cancel-passkey" class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
                    Cancel
                </button>
                <button id="create-with-passkey" class="px-4 py-2 text-sm font-medium text-white bg-primary-600 border border-transparent rounded-md hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
                    Create Account
                </button>
            </div>
        </div>
    </div>
</div>

<script>
// WebAuthn passkey signup
document.getElementById('passkey-signup').addEventListener('click', function() {
    document.getElementById('passkey-modal').classList.remove('hidden');
    document.getElementById('modal-username').focus();
});

// Close modal
function closeModal() {
    document.getElementById('passkey-modal').classList.add('hidden');
    document.getElementById('modal-username').value = '';
    document.getElementById('modal-email').value = '';
}

document.getElementById('close-modal').addEventListener('click', closeModal);
document.getElementById('cancel-passkey').addEventListener('click', closeModal);

// Handle passkey signup
document.getElementById('create-with-passkey').addEventListener('click', async function() {
    const button = this;
    const originalText = button.innerHTML;
    const username = document.getElementById('modal-username').value.trim();
    const email = document.getElementById('modal-email').value.trim();

    if (!username || !email) {
        alert('Please enter both username and email.');
        return;
    }

    try {
        // Disable button and show loading state
        button.disabled = true;
        button.innerHTML = `
            <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Creating...
        `;

        // Step 1: Start registration
        const beginResponse = await fetch('/webauthn/signup/begin/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                username: username,
                email: email
            })
        });

        if (!beginResponse.ok) {
            throw new Error('Failed to start registration');
        }

        const beginData = await beginResponse.json();
        if (!beginData.success) {
            throw new Error(beginData.error || 'Failed to start registration');
        }

        const options = beginData.options;

        // Convert base64url strings to ArrayBuffers for WebAuthn API
        options.challenge = base64urlToArrayBuffer(options.challenge);
        options.user.id = base64urlToArrayBuffer(options.user.id);

        // Step 2: Create credential with WebAuthn API
        const credential = await navigator.credentials.create({
            publicKey: options
        });

        if (!credential) {
            throw new Error('No credential returned');
        }

        // Step 3: Complete registration
        const credentialData = {
            id: credential.id,
            rawId: arrayBufferToBase64url(credential.rawId),
            response: {
                attestationObject: arrayBufferToBase64url(credential.response.attestationObject),
                clientDataJSON: arrayBufferToBase64url(credential.response.clientDataJSON),
            },
            type: credential.type,
            challenge: beginData.options.challenge
        };

        const completeResponse = await fetch('/webauthn/signup/complete/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                credential: credentialData,
                username: username,
                email: email
            })
        });

        if (!completeResponse.ok) {
            throw new Error('Registration failed');
        }

        const completeData = await completeResponse.json();
        if (completeData.success) {
            // Close modal and redirect
            closeModal();
            window.location.href = completeData.redirect_url || '/dashboard/';
        } else {
            throw new Error(completeData.error || 'Registration failed');
        }

    } catch (error) {
        console.error('WebAuthn signup error:', error);

        // Show user-friendly error message
        let errorMessage = 'Account creation failed. ';

        if (error.name === 'NotSupportedError') {
            errorMessage += 'Passkeys are not supported on this device.';
        } else if (error.name === 'NotAllowedError') {
            errorMessage += 'Registration was cancelled or timed out.';
        } else if (error.name === 'SecurityError') {
            errorMessage += 'Security error occurred.';
        } else if (error.message.includes('Username already exists')) {
            errorMessage = 'Username already exists. Please choose a different username.';
        } else if (error.message.includes('Email already exists')) {
            errorMessage = 'Email already exists. Please use a different email or sign in.';
        } else {
            errorMessage += 'Please try again or use email signup.';
        }

        alert(errorMessage);
    } finally {
        // Restore button state
        button.disabled = false;
        button.innerHTML = originalText;
    }
});

// Utility functions for base64url encoding/decoding
function base64urlToArrayBuffer(base64url) {
    const base64 = base64url.replace(/-/g, '+').replace(/_/g, '/');
    const padded = base64.padEnd(base64.length + (4 - base64.length % 4) % 4, '=');
    const binary = atob(padded);
    const bytes = new Uint8Array(binary.length);
    for (let i = 0; i < binary.length; i++) {
        bytes[i] = binary.charCodeAt(i);
    }
    return bytes.buffer;
}

function arrayBufferToBase64url(buffer) {
    const bytes = new Uint8Array(buffer);
    let binary = '';
    for (let i = 0; i < bytes.byteLength; i++) {
        binary += String.fromCharCode(bytes[i]);
    }
    const base64 = btoa(binary);
    return base64.replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '');
}

// Check if WebAuthn is supported
function checkWebAuthnSupport() {
    // Only hide if we're absolutely certain it's not supported
    // Keep button visible by default for better user experience
    const button = document.getElementById('passkey-signup');

    if (!window.PublicKeyCredential) {
        // Check if it's a very old browser
        const isOldBrowser = /MSIE|Trident/.test(navigator.userAgent) ||
                            (navigator.userAgent.includes('Chrome/') &&
                             parseInt(navigator.userAgent.match(/Chrome\/(\d+)/)[1]) < 67);

        if (isOldBrowser) {
            button.style.display = 'none';
        }
        return false;
    }

    if (!navigator.credentials || !navigator.credentials.create) {
        return false;
    }

    return true;
}

// Run the check when DOM is loaded
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', checkWebAuthnSupport);
} else {
    checkWebAuthnSupport();
}
</script>
{% endblock %}